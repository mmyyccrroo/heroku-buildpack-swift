#!/usr/bin/env bash

echo "-----> Checkinig if there is any pre-compile hook"
if [ -f bin/pre_compile ]; then
  echo "-----> Running pre-compile hook"
  chmod +x bin/pre_compile
  ./bin/pre_compile
else
	echo "-----> No pre-compile hooks found"
fi

# echo "-----> Install system level dependencies"
# APT_CACHE_DIR="$CACHE_DIR/apt/cache"
# APT_STATE_DIR="$CACHE_DIR/apt/state"
# mkdir -p "$APT_CACHE_DIR/archives/partial"
# mkdir -p "$APT_STATE_DIR/lists/partial"
# APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
# apt-get $APT_OPTIONS update
# apt-get $APT_OPTIONS -y --force-yes -d install --reinstall mongodb uuid-dev

function decomp() {
    gunzip -f $CACHE_DIR/$1 || fail Decompressing $1
  }

function fail() {
    say Build failure: $*
    step Log
    popd
    cat $BUILD_DIR/build.log
    exit 1
  }

function fetch() {
    wget -P $CACHE_DIR $URL/$1 2> /dev/null || fail Fetching $1
  }

indent() {
  sed -u 's/^/       /'
}

function paths() {
    cat << EOF
#!/bin/bash
MY_PATH=$1
if [ "\$MY_PATH" == "" ]; then
    MY_PATH=\$(dirname \$(dirname \$(readlink -f \$0)))/.delta
  fi
export INCLUDE_PATH=\$MY_PATH/usr/local/include:\$MY_PATH/usr/local/include/x86_64-linux-gnu:\$MY_PATH/usr/include:\$MY_PATH/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH
export LD_LIBRARY_PATH=\$MY_PATH/usr/local/lib:\$MY_PATH/usr/local/lib/x86_64-linux-gnu:\$MY_PATH/usr/lib:\$MY_PATH/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH
export LIBRARY_PATH=\$MY_PATH/usr/local/lib:\$MY_PATH/usr/local/lib/x86_64-linux-gnu:\$MY_PATH/usr/lib:\$MY_PATH/usr/lib/x86_64-linux-gnu:\$LIBRARY_PATH
export PATH=\$MY_PATH/usr/local/bin:\$MY_PATH/usr/local/sbin:\$MY_PATH/usr/bin:\$MY_PATH/usr/sbin:\$PATH
export PKG_CONFIG_PATH=\$MY_PATH/usr/lib/x86_64-linux-gnu/pkgconfig:\$PKG_CONFIG_PATH
EOF
  }

function say() {
    echo $* | sed -u 's/^/       /'
  }

function step() {
    echo -----\> $*
  }

function untar() {
    tar -C $CACHE_DIR -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

function untar_rt() {
    tar -C $CACHE_DIR/runtime -xf $CACHE_DIR/$1 || fail Extracting $1
    rm -f $CACHE_DIR/$1
  }

pushd .

step Checking dependencies
if [ -f $CACHE_DIR/depends_done.$SCRIPT_VER ]; then
    say Dependencies cached
  else
    say Ok
    step Fetching dependencies
    URL=http://www.perfect.org/_buildpack
    fetch cedar14-libmongoc.tar.gz
    fetch cedar14-uuid-dev.tar.gz
    fetch ubuntu14-libmongoc-rt.tar.gz
    fetch ubuntu14-uuid-rt.tar.gz
    say Ok

    step Decompressing dependencies
    decomp cedar14-libmongoc.tar.gz
    decomp cedar14-uuid-dev.tar.gz
    decomp ubuntu14-libmongoc-rt.tar.gz
    decomp ubuntu14-uuid-rt.tar.gz
    say Ok

    step Extracting dependencies
    untar cedar14-libmongoc.tar
    untar cedar14-uuid-dev.tar
    # untar_rt ubuntu14-libmongoc-rt.tar
    # untar_rt ubuntu14-uuid-rt.tar
    # touch $CACHE_DIR/depends_done.$SCRIPT_VER
  fi
say Ok

step Installing build dependencies into build environment
rsync -Pa $CACHE_DIR/.delta/ /app/.delta/ > $BUILD_DIR/build.log || fail rsync
say Ok
